<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/C4Math.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/C4Math</TokenIdentifier>
			<Abstract type="html">This document describes the mathematic methods and functions available in the C4 Framework.</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>
			
			<NodeRef refid="19"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/abs:</TokenIdentifier>
			<Abstract type="html">Computes the absolute value of an integer number</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (NSInteger)abs:(NSInteger)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The number to be converted to its absolute value</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSInteger returns the positive whole (integer), if the given number is a floating-point the method first converts it to an integer</Abstract></ReturnValue>
			<Anchor>//api/name/abs:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/absf:</TokenIdentifier>
			<Abstract type="html">Computes the absolute value of a floating-point number</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)absf:(CGFloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The float number to be converted to its absolute value</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSInteger returns the positive floating-point value of a given number</Abstract></ReturnValue>
			<Anchor>//api/name/absf:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/ceil:</TokenIdentifier>
			<Abstract type="html">Rounds a floating-point value</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (NSInteger)ceil:(CGFloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The number for which to calculate ceil:</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSInteger returns the smallest whole number no less than value</Abstract></ReturnValue>
			<Anchor>//api/name/ceil:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/constrain:min:max:</TokenIdentifier>
			<Abstract type="html">Constrains a number to a given range of integer values</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (NSInteger)constrain:(NSInteger)value min:(NSInteger)min max:(NSInteger)max</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The number to constrain</Abstract>
				</Parameter><Parameter>
					<Name>min</Name>
					<Abstract type="html">The smallest possible number in the range</Abstract>
				</Parameter><Parameter>
					<Name>max</Name>
					<Abstract type="html">The largest possible number in the range</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSInteger Either min or max if the given number lies outside the range (e.g. if value is less than min this method returns min), otherwise this method returns value (unchanged)</Abstract></ReturnValue>
			<Anchor>//api/name/constrain:min:max:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/constrainf:min:max:</TokenIdentifier>
			<Abstract type="html">Constrains a number to a given range of floating-point values</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)constrainf:(CGFloat)value min:(CGFloat)min max:(CGFloat)max</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The number to constrain</Abstract>
				</Parameter><Parameter>
					<Name>min</Name>
					<Abstract type="html">The smallest possible number in the range</Abstract>
				</Parameter><Parameter>
					<Name>max</Name>
					<Abstract type="html">The largest possible number in the range</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFloat Either min or max if the given number lies outside the range (e.g. if value is less than min this method returns min), otherwise this method returns value (unchanged)</Abstract></ReturnValue>
			<Anchor>//api/name/constrainf:min:max:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/exp:</TokenIdentifier>
			<Abstract type="html">The natural exponential function</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)exp:(CGFloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The value to use in the exponential function.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFloat Returns the calucation of of e ^ value</Abstract></ReturnValue>
			<Anchor>//api/name/exp:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/floor:</TokenIdentifier>
			<Abstract type="html">Rounds a floating-point value
  </Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (NSInteger)floor:(CGFloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The number to round up</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSInteger returns the largest whole number no greater than value</Abstract></ReturnValue>
			<Anchor>//api/name/floor:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/lerpBetweenA:B:byAmount:</TokenIdentifier>
			<Abstract type="html">Calculates the linear interpolation of a value between two numbers</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)lerpBetweenA:(CGFloat)a B:(CGFloat)b byAmount:(CGFloat)amount</Declaration>
			<Parameters>
				<Parameter>
					<Name>a</Name>
					<Abstract type="html">the first value</Abstract>
				</Parameter><Parameter>
					<Name>b</Name>
					<Abstract type="html">the second value</Abstract>
				</Parameter><Parameter>
					<Name>amount</Name>
					<Abstract type="html">floating-point value (should be between 0.0 and 1.0) as a measure of relative distance between the two points</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFloat the floating point value of a number between a and b which is amount point between those two numbers</Abstract></ReturnValue>
			<Anchor>//api/name/lerpBetweenA:B:byAmount:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/log:</TokenIdentifier>
			<Abstract type="html">Calculates the natural logarithm of a given value</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)log:(CGFloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The number to which to apply the logarithm equation</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFloat The natural logartihm of a given floating-point value</Abstract></ReturnValue>
			<Anchor>//api/name/log:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/map:fromMin:max:toMin:max:</TokenIdentifier>
			<Abstract type="html">Takes a value within a given range of numbers, and converts it to a relative value between another set of numbers.</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)map:(CGFloat)value fromMin:(CGFloat)min1 max:(CGFloat)max1 toMin:(CGFloat)min2 max:(CGFloat)max2</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The number to map (should be between min1 and max1)</Abstract>
				</Parameter><Parameter>
					<Name>min1</Name>
					<Abstract type="html">The smallest number in the original range</Abstract>
				</Parameter><Parameter>
					<Name>max1</Name>
					<Abstract type="html">The largest number in the original range</Abstract>
				</Parameter><Parameter>
					<Name>min2</Name>
					<Abstract type="html">The smallest number in the new range</Abstract>
				</Parameter><Parameter>
					<Name>max2</Name>
					<Abstract type="html">The largest number in the new range</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFloat Either min or max if the given number lies outside the range (e.g. if value is less than min this method returns min), otherwise this method returns value (unchanged)</Abstract></ReturnValue>
			<Anchor>//api/name/map:fromMin:max:toMin:max:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/maxOfA:B:</TokenIdentifier>
			<Abstract type="html">Calculates the larger value of two given numbers</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)maxOfA:(CGFloat)a B:(CGFloat)b</Declaration>
			<Parameters>
				<Parameter>
					<Name>a</Name>
					<Abstract type="html">A given number to compare</Abstract>
				</Parameter><Parameter>
					<Name>b</Name>
					<Abstract type="html">A given number to compare</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFlaot the larger value of a and b</Abstract></ReturnValue>
			<Anchor>//api/name/maxOfA:B:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/maxOfA:B:C:</TokenIdentifier>
			<Abstract type="html">Calculates the larger of three given numbers</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)maxOfA:(CGFloat)a B:(CGFloat)b C:(CGFloat)c</Declaration>
			<Parameters>
				<Parameter>
					<Name>a</Name>
					<Abstract type="html">A given number to compare</Abstract>
				</Parameter><Parameter>
					<Name>b</Name>
					<Abstract type="html">A given number to compare</Abstract>
				</Parameter><Parameter>
					<Name>c</Name>
					<Abstract type="html">A given number to compare</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFlaot the larger of a, b and c</Abstract></ReturnValue>
			<Anchor>//api/name/maxOfA:B:C:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/minOfA:B:</TokenIdentifier>
			<Abstract type="html">Calculates the smaller value of two given numbers</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)minOfA:(CGFloat)a B:(CGFloat)b</Declaration>
			<Parameters>
				<Parameter>
					<Name>a</Name>
					<Abstract type="html">A given number to compare</Abstract>
				</Parameter><Parameter>
					<Name>b</Name>
					<Abstract type="html">A given number to compare</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFlaot the smaller value of a and b</Abstract></ReturnValue>
			<Anchor>//api/name/minOfA:B:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/minOfA:B:C:</TokenIdentifier>
			<Abstract type="html">Calculates the smaller value of three given numbers</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)minOfA:(CGFloat)a B:(CGFloat)b C:(CGFloat)c</Declaration>
			<Parameters>
				<Parameter>
					<Name>a</Name>
					<Abstract type="html">A given number to compare</Abstract>
				</Parameter><Parameter>
					<Name>b</Name>
					<Abstract type="html">A given number to compare</Abstract>
				</Parameter><Parameter>
					<Name>c</Name>
					<Abstract type="html">A given number to compare</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFlaot the smaller value of a, b and c</Abstract></ReturnValue>
			<Anchor>//api/name/minOfA:B:C:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/norm:fromMin:toMax:</TokenIdentifier>
			<Abstract type="html">Unused</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)norm:(CGFloat)value fromMin:(CGFloat)min toMax:(CGFloat)max</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">-</Abstract>
				</Parameter><Parameter>
					<Name>min</Name>
					<Abstract type="html">-</Abstract>
				</Parameter><Parameter>
					<Name>max</Name>
					<Abstract type="html">-</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFloat returns 0</Abstract></ReturnValue>
			<Anchor>//api/name/norm:fromMin:toMax:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/pow:raisedTo:</TokenIdentifier>
			<Abstract type="html">Calculates the value of a number raised to a given degree</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)pow:(CGFloat)value raisedTo:(CGFloat)degree</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">Any real floating-point value</Abstract>
				</Parameter><Parameter>
					<Name>degree</Name>
					<Abstract type="html">Any real floating-point value</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFloat The calculation of value ^ _degree</Abstract></ReturnValue>
			<Anchor>//api/name/pow:raisedTo:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/round:</TokenIdentifier>
			<Abstract type="html">Rounds a floating-point value</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)round:(CGFloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The number to round</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSInteger returns the closest whole number to a given value</Abstract></ReturnValue>
			<Anchor>//api/name/round:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/square:</TokenIdentifier>
			<Abstract type="html">Squares a given value</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)square:(CGFloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The number to square</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFloat The result of value multiplied by itself</Abstract></ReturnValue>
			<Anchor>//api/name/square:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/sqrt:</TokenIdentifier>
			<Abstract type="html">Calculates the square root of a given value</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)sqrt:(CGFloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The number to which to apply the square root</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFloat The square root of value</Abstract></ReturnValue>
			<Anchor>//api/name/sqrt:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/acos:</TokenIdentifier>
			<Abstract type="html">Calculates the arc cosine of a given value.</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)acos:(CGFloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The number for which to calculate the arccosine</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFloat A value in the range of (0..PI)</Abstract></ReturnValue>
			<Anchor>//api/name/acos:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/asin:</TokenIdentifier>
			<Abstract type="html">Calculates the arc sine of a given value.</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)asin:(CGFloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The number for which to calculate the arcsine</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFloat A value in the range of (-PI/2..+PI/2)</Abstract></ReturnValue>
			<Anchor>//api/name/asin:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/atan:</TokenIdentifier>
			<Abstract type="html">Calculates the arc tangent of a single given value.</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)atan:(CGFloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The number for which to calculate the arctanent</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFloat A value in the range of (-PI/2..+PI/2)</Abstract></ReturnValue>
			<Anchor>//api/name/atan:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/atan2Y:X:</TokenIdentifier>
			<Abstract type="html">Calculates the arc tangent of a two given values.</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)atan2Y:(CGFloat)y X:(CGFloat)x</Declaration>
			<Parameters>
				<Parameter>
					<Name>y</Name>
					<Abstract type="html">The y value for which to calculate the arctangent2</Abstract>
				</Parameter><Parameter>
					<Name>x</Name>
					<Abstract type="html">The x value for which to calculate the arctangent2</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFloat The value of th earc tangent of y/x, using the signs of both arguments to determine the quadrant of the return value.</Abstract></ReturnValue>
			<Anchor>//api/name/atan2Y:X:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/cos:</TokenIdentifier>
			<Abstract type="html">Calculates the cosine of a value</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)cos:(CGFloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The number for which to calculate the cosine</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFloat The cosine of value measured in RADIANS.</Abstract></ReturnValue>
			<Anchor>//api/name/cos:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/sin:</TokenIdentifier>
			<Abstract type="html">Calculates the sine of a value</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)sin:(CGFloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The number for which to calculate the sine</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFloat The sine of value measured in RADIANS.</Abstract></ReturnValue>
			<Anchor>//api/name/sin:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/tan:</TokenIdentifier>
			<Abstract type="html">Calculates the tangent of a value</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (CGFloat)tan:(CGFloat)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The number for which to calculate the tan</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">CGFloat The tangent of value measured in RADIANS.</Abstract></ReturnValue>
			<Anchor>//api/name/tan:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/randomInt:</TokenIdentifier>
			<Abstract type="html">Calculates a random value</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (NSInteger)randomInt:(NSInteger)value</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The highest possible random number to return</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSInteger A random integer between 0 and value</Abstract></ReturnValue>
			<Anchor>//api/name/randomInt:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/C4Math/randomIntBetweenA:andB:</TokenIdentifier>
			<Abstract type="html">Calculates a random value</Abstract>
			<DeclaredIn>C4Math.h</DeclaredIn>			
			
			<Declaration>+ (NSInteger)randomIntBetweenA:(NSInteger)a andB:(NSInteger)b</Declaration>
			<Parameters>
				<Parameter>
					<Name>a</Name>
					<Abstract type="html">The lowest possible random number to return</Abstract>
				</Parameter><Parameter>
					<Name>b</Name>
					<Abstract type="html">The highest possible random number to return</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSInteger A random integer between a and b</Abstract></ReturnValue>
			<Anchor>//api/name/randomIntBetweenA:andB:</Anchor>
            <NodeRef refid="19"/>
		</Token>
		
	</File>
</Tokens>